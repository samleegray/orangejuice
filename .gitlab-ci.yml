variables:
    MINIMUM_COVERAGE: 80

stages:
  - setup
  - validation
  - coverage
  - deploy

.base_setup:
  image: ruby:3.3.0
  rules:
    - if: $CI_COMMIT_BRANCH != "main"
  before_script:
    - bundle config set --local path './vendor/ruby'
  cache:
    key:
      files:
        - Gemfile.lock
    paths:
      - ./vendor/ruby

setup_dependencies:
  stage: setup
  extends:
    - .base_setup
  script:
    - bundle install

run_tests:
  stage: validation
  extends:
    - .base_setup
  script:
    - bundle exec rake test
  artifacts:
    when: always
    reports:
        junit: coverage/coverage.xml
    paths:
      - coverage/

tests_coverage:
  stage: coverage
  script:
    - >
      if ! command -v jq &> /dev/null; then
        apt-get update && apt-get install -y jq
      fi
    - covered_percent=$(cat coverage/coverage.json | jq -r '.metrics.covered_percent')
    - re='^[+-]?[0-9]+([.||,][0-9]+)?$'
    - >
      if ! [[ $covered_percent =~ $re ]]; then 
        echo "WARNING :: Couldn't get coverage from artifact."
        exit 0
      fi
    - required_coverage=$MINIMUM_COVERAGE
    - >
      if [ $covered_percent -le $required_coverage ]; then
        echo "Coverage ($covered_percent%) is below the required threshold of $required_coverage%."
        exit 1
      else
        echo "Coverage ($covered_percent%) passed the required threshold of $required_coverage%."
      fi

heroku_deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - gem install dpl
    - echo "Deploying to Heroku..."
    - echo "Deploying app name, $HEROKU_APP_NAME, with key $HEROKU_PRODUCTION_KEY."
    - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY